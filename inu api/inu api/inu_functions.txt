【inu.javaで使われている主な関数・メソッド一覧】

1. Arrays.asList(...)
説明
    - 配列や複数の値からList（リスト）を作るメソッドです。
    - 例: Arrays.asList("A", "B", "C")
呼び出し方（パラメータの指定方法）
    - Arrays.asList(値1, 値2, ...)
得られるデータの形式
    - List型（例: List<String>）で、要素は指定した順に格納されます。
今回のプログラムでの用途
    - 犬種名の一覧をリストとして管理しています。

2. Map.ofEntries(...)
説明
    - 複数のキーと値からMap（連想配列）を作るメソッドです。
    - 例: Map.ofEntries(Map.entry("A", "あ"), ...)
呼び出し方（パラメータの指定方法）
    - Map.ofEntries(Map.entry(key1, value1), Map.entry(key2, value2), ...)
得られるデータの形式
    - Map型（例: Map<String, String>）で、各キーに対応する値が格納されます。
今回のプログラムでの用途
    - 英語の犬種名と日本語名の対応表を作っています。

3. Map.entry(key, value)
説明
    - Mapのキーと値のペア（エントリ）を作るメソッドです。
    - 例: Map.entry("A", "あ")
呼び出し方（パラメータの指定方法）
    - Map.entry(キー, 値)
得られるデータの形式
    - Map.Entry型（キーと値のペア）
今回のプログラムでの用途
    - Map.ofEntriesの中で使っています。

4. Random rand = new Random()
説明
    - ランダムな値を生成するためのインスタンスを作るコードです。
    - 例: new Random()
呼び出し方（パラメータの指定方法）
    - new Random()
得られるデータの形式
    - Random型のインスタンス。乱数生成用のオブジェクトです。
今回のプログラムでの用途
    - ランキングリストからランダムに選ぶために使っています。

5. rand.nextInt(n)
説明
    - 0以上n未満のランダムな整数を生成するメソッドです。
    - 例: rand.nextInt(10) は0～9のどれかの整数を返します。
呼び出し方（パラメータの指定方法）
    - rand.nextInt(範囲の上限n)
得られるデータの形式
    - int型（整数値）。0～n-1のいずれか。
今回のプログラムでの用途
    - ランキングリストからランダムなインデックスを選ぶために使っています。

6. ranking.get(idx)
説明
    - Listから指定したインデックスの要素を取得するメソッドです。
    - 例: ranking.get(0) はリストの最初の要素を返します。
呼び出し方（パラメータの指定方法）
    - ranking.get(インデックス番号)
得られるデータの形式
    - 指定した型（例: String型）。リストの要素。
今回のプログラムでの用途
    - ランダムに選んだインデックスから犬種名を取得しています。

7. breedJp.get(key)
説明
    - Mapから指定したキーに対応する値を取得するメソッドです。
    - 例: breedJp.get("Shiba Inu") は "柴犬" を返します。
呼び出し方（パラメータの指定方法）
    - breedJp.get(キー)
得られるデータの形式
    - 指定した型（例: String型）。Mapに格納された値。
今回のプログラムでの用途
    - 英語の犬種名から日本語名を取得するために使っています。

8. System.out.println(...)
説明
    - 標準出力（コンソール）に文字列を表示するメソッドです（改行あり）。
    - 例: System.out.println("こんにちは");
呼び出し方（パラメータの指定方法）
    - System.out.println(表示したい内容)
得られるデータの形式
    - 画面に文字列が表示される（戻り値なし）。
今回のプログラムでの用途
    - クイズの問題や正解・不正解のメッセージを表示しています。

9. System.out.print(...)
説明
    - 標準出力（コンソール）に文字列を表示するメソッドです（改行なし）。
    - 例: System.out.print("入力してください: ");
呼び出し方（パラメータの指定方法）
    - System.out.print(表示したい内容)
得られるデータの形式
    - 画面に文字列が表示される（戻り値なし）。
今回のプログラムでの用途
    - ユーザーへの入力促しメッセージを表示しています。

10. Scanner scanner = new Scanner(System.in)
説明
    - 標準入力（キーボード入力）を受け取るためのインスタンスを作成します。
呼び出し方（パラメータの指定方法）
    - new Scanner(System.in)
得られるデータの形式
    - Scanner型のインスタンス。入力受付用のオブジェクトです。
今回のプログラムでの用途
    - ユーザーからの回答を受け取るために使っています。

11. scanner.nextLine()
説明
    - ユーザーが入力した1行分の文字列を取得するメソッドです。
呼び出し方（パラメータの指定方法）
    - scanner.nextLine()
得られるデータの形式
    - String型。ユーザーが入力した文字列。
今回のプログラムでの用途
    - ユーザーの回答を取得しています。

12. String.trim()
説明
    - 文字列の前後の空白を除去するメソッドです。
呼び出し方（パラメータの指定方法）
    - 変数.trim()
得られるデータの形式
    - String型。空白が除去された文字列。
今回のプログラムでの用途
    - 入力値の余分な空白を除去して正確に判定できるようにしています。

13. Integer.parseInt(String)
説明
    - 文字列を整数に変換するメソッドです。
呼び出し方（パラメータの指定方法）
    - Integer.parseInt(変換したい文字列)
得られるデータの形式
    - int型（整数値）。
今回のプログラムでの用途
    - ユーザーの回答（文字列）を整数に変換して順位判定に使っています。

14. scanner.close()
説明
    - Scannerを閉じてリソースを解放するメソッドです。
呼び出し方（パラメータの指定方法）
    - scanner.close()
得られるデータの形式
    - 戻り値なし。
今回のプログラムでの用途
    - 入力処理が終わった後にScannerを閉じています。

15. try { ... } catch (NumberFormatException e) { ... }
説明
    - 例外処理構文。数字以外が入力された場合のエラーをキャッチして安全に処理します。
呼び出し方（パラメータの指定方法）
    - try { ... } catch (NumberFormatException e) { ... }
得られるデータの形式
    - 例外が発生した場合はcatch内の処理が実行される。
今回のプログラムでの用途
    - ユーザーが数字以外を入力した場合にエラーメッセージを表示しています。

16. HttpClient.newHttpClient()
説明
    - HTTP通信を行うためのクライアントインスタンスを生成するメソッドです。
    - 例: HttpClient client = HttpClient.newHttpClient();
呼び出し方（パラメータの指定方法）
    - HttpClient.newHttpClient()
得られるデータの形式
    - HttpClient型のインスタンス。
今回のプログラムでの用途
    - APIにアクセスして犬種リストを取得するために使っています。

17. HttpRequest.newBuilder().uri(...).build()
説明
    - HTTPリクエストを生成するためのメソッドです。
    - 例: HttpRequest request = HttpRequest.newBuilder().uri(URI.create(url)).build();
呼び出し方（パラメータの指定方法）
    - HttpRequest.newBuilder().uri(URI.create(リクエスト先URL)).build()
得られるデータの形式
    - HttpRequest型のインスタンス。
今回のプログラムでの用途
    - APIにリクエストを送るためのリクエストオブジェクトを作成しています。

18. client.send(request, HttpResponse.BodyHandlers.ofString())
説明
    - HTTPリクエストを送信し、レスポンスを取得するメソッドです。
    - 例: HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
呼び出し方（パラメータの指定方法）
    - client.send(HttpRequest, HttpResponse.BodyHandler)
得られるデータの形式
    - HttpResponse型のインスタンス。レスポンスボディはString型。
今回のプログラムでの用途
    - APIから犬種リストのデータを取得しています。

19. JSONArray, JSONObject
説明
    - JSON形式のデータを扱うためのクラスです。
    - JSONArrayは配列、JSONObjectはオブジェクトを表します。
    - 例: new JSONArray(json文字列), obj.getString("name")
呼び出し方（パラメータの指定方法）
    - new JSONArray(文字列), new JSONObject(文字列)
得られるデータの形式
    - JSONArray型、JSONObject型。
今回のプログラムでの用途
    - APIから取得したJSONデータを解析し、犬種名リストを作成しています。

20. try { ... } catch (Exception e) { ... }
説明
    - 例外処理構文。予期しないエラーが発生した場合の処理を記述します。
呼び出し方（パラメータの指定方法）
    - try { ... } catch (Exception e) { ... }
得られるデータの形式
    - 例外が発生した場合はcatch内の処理が実行される。
今回のプログラムでの用途
    - API通信やJSON解析でエラーが発生した場合に備えています。

--- 
このファイルはinu.javaで使われている関数・メソッドの説明用です。
